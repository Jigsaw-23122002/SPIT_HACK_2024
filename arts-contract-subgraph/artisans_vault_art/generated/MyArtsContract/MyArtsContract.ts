// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class buyEvent extends ethereum.Event {
  get params(): buyEvent__Params {
    return new buyEvent__Params(this);
  }
}

export class buyEvent__Params {
  _event: buyEvent;

  constructor(event: buyEvent) {
    this._event = event;
  }

  get param0(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get param1(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get param2(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get param3(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class mintEvent extends ethereum.Event {
  get params(): mintEvent__Params {
    return new mintEvent__Params(this);
  }
}

export class mintEvent__Params {
  _event: mintEvent;

  constructor(event: mintEvent) {
    this._event = event;
  }

  get param0(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get param1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get param2(): string {
    return this._event.parameters[2].value.toString();
  }

  get param3(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class putTokenOnSaleEvent extends ethereum.Event {
  get params(): putTokenOnSaleEvent__Params {
    return new putTokenOnSaleEvent__Params(this);
  }
}

export class putTokenOnSaleEvent__Params {
  _event: putTokenOnSaleEvent;

  constructor(event: putTokenOnSaleEvent) {
    this._event = event;
  }

  get param0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get param1(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get param2(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class transferEtherEvent extends ethereum.Event {
  get params(): transferEtherEvent__Params {
    return new transferEtherEvent__Params(this);
  }
}

export class transferEtherEvent__Params {
  _event: transferEtherEvent;

  constructor(event: transferEtherEvent) {
    this._event = event;
  }

  get param0(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get param1(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get param2(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MyArtsContract__getTokenDetailsResult {
  value0: string;
  value1: BigInt;
  value2: boolean;
  value3: Address;

  constructor(
    value0: string,
    value1: BigInt,
    value2: boolean,
    value3: Address,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }

  getValue0(): string {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): boolean {
    return this.value2;
  }

  getValue3(): Address {
    return this.value3;
  }
}

export class MyArtsContract extends ethereum.SmartContract {
  static bind(address: Address): MyArtsContract {
    return new MyArtsContract("MyArtsContract", address);
  }

  countOfTokensOnSale(): BigInt {
    let result = super.call(
      "countOfTokensOnSale",
      "countOfTokensOnSale():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_countOfTokensOnSale(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "countOfTokensOnSale",
      "countOfTokensOnSale():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentTokenId(): BigInt {
    let result = super.call("currentTokenId", "currentTokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentTokenId",
      "currentTokenId():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMyTokens(): Array<BigInt> {
    let result = super.call("getMyTokens", "getMyTokens():(uint256[])", []);

    return result[0].toBigIntArray();
  }

  try_getMyTokens(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("getMyTokens", "getMyTokens():(uint256[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getTokenDetails(_tokenId: BigInt): MyArtsContract__getTokenDetailsResult {
    let result = super.call(
      "getTokenDetails",
      "getTokenDetails(uint256):(string,uint256,bool,address)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)],
    );

    return new MyArtsContract__getTokenDetailsResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toBoolean(),
      result[3].toAddress(),
    );
  }

  try_getTokenDetails(
    _tokenId: BigInt,
  ): ethereum.CallResult<MyArtsContract__getTokenDetailsResult> {
    let result = super.tryCall(
      "getTokenDetails",
      "getTokenDetails(uint256):(string,uint256,bool,address)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MyArtsContract__getTokenDetailsResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toBoolean(),
        value[3].toAddress(),
      ),
    );
  }

  getTokensOnSale(): Array<BigInt> {
    let result = super.call(
      "getTokensOnSale",
      "getTokensOnSale():(uint256[])",
      [],
    );

    return result[0].toBigIntArray();
  }

  try_getTokensOnSale(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getTokensOnSale",
      "getTokensOnSale():(uint256[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isTokenOnSale(param0: BigInt): boolean {
    let result = super.call("isTokenOnSale", "isTokenOnSale(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBoolean();
  }

  try_isTokenOnSale(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTokenOnSale",
      "isTokenOnSale(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  metadataUri(param0: BigInt): string {
    let result = super.call("metadataUri", "metadataUri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toString();
  }

  try_metadataUri(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("metadataUri", "metadataUri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenCost(param0: BigInt): BigInt {
    let result = super.call("tokenCost", "tokenCost(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBigInt();
  }

  try_tokenCost(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenCost", "tokenCost(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenToUser(param0: BigInt): Address {
    let result = super.call("tokenToUser", "tokenToUser(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_tokenToUser(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenToUser",
      "tokenToUser(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userToTokens(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "userToTokens",
      "userToTokens(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_userToTokens(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userToTokens",
      "userToTokens(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class BuyCall extends ethereum.Call {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _metadata(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _cost(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class PutTokenOnSaleCall extends ethereum.Call {
  get inputs(): PutTokenOnSaleCall__Inputs {
    return new PutTokenOnSaleCall__Inputs(this);
  }

  get outputs(): PutTokenOnSaleCall__Outputs {
    return new PutTokenOnSaleCall__Outputs(this);
  }
}

export class PutTokenOnSaleCall__Inputs {
  _call: PutTokenOnSaleCall;

  constructor(call: PutTokenOnSaleCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PutTokenOnSaleCall__Outputs {
  _call: PutTokenOnSaleCall;

  constructor(call: PutTokenOnSaleCall) {
    this._call = call;
  }
}
